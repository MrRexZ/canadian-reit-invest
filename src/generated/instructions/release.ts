/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const RELEASE_DISCRIMINATOR = new Uint8Array([
  253, 249, 15, 206, 28, 127, 193, 241,
]);

export function getReleaseDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(RELEASE_DISCRIMINATOR);
}

export type ReleaseInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TAccountAdminUsdcAta extends string | AccountMeta<string> = string,
  TAccountUsdcMint extends string | AccountMeta<string> = string,
  TAccountEscrowVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountFundraiser extends string
        ? WritableAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountInvestment extends string
        ? WritableAccount<TAccountInvestment>
        : TAccountInvestment,
      TAccountAdminUsdcAta extends string
        ? WritableAccount<TAccountAdminUsdcAta>
        : TAccountAdminUsdcAta,
      TAccountUsdcMint extends string
        ? ReadonlyAccount<TAccountUsdcMint>
        : TAccountUsdcMint,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type ReleaseInstructionData = {
  discriminator: ReadonlyUint8Array;
  reitIdHash: ReadonlyUint8Array;
};

export type ReleaseInstructionDataArgs = { reitIdHash: ReadonlyUint8Array };

export function getReleaseInstructionDataEncoder(): FixedSizeEncoder<ReleaseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
    ]),
    (value) => ({ ...value, discriminator: RELEASE_DISCRIMINATOR })
  );
}

export function getReleaseInstructionDataDecoder(): FixedSizeDecoder<ReleaseInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getReleaseInstructionDataCodec(): FixedSizeCodec<
  ReleaseInstructionDataArgs,
  ReleaseInstructionData
> {
  return combineCodec(
    getReleaseInstructionDataEncoder(),
    getReleaseInstructionDataDecoder()
  );
}

export type ReleaseAsyncInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountAdminUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser?: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  /** Admin's USDC ATA */
  adminUsdcAta?: Address<TAccountAdminUsdcAta>;
  /** USDC mint (must match fundraiser.usdc_mint) */
  usdcMint: Address<TAccountUsdcMint>;
  escrowVault: Address<TAccountEscrowVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  reitIdHash: ReleaseInstructionDataArgs['reitIdHash'];
};

export async function getReleaseInstructionAsync<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountAdminUsdcAta extends string,
  TAccountUsdcMint extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: ReleaseAsyncInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountAdminUsdcAta,
    TAccountUsdcMint,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ReleaseInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountAdminUsdcAta,
    TAccountUsdcMint,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    adminUsdcAta: { value: input.adminUsdcAta ?? null, isWritable: true },
    usdcMint: { value: input.usdcMint ?? null, isWritable: false },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }
  if (!accounts.adminUsdcAta.value) {
    accounts.adminUsdcAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.admin.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.usdcMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.adminUsdcAta),
      getAccountMeta(accounts.usdcMint),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getReleaseInstructionDataEncoder().encode(
      args as ReleaseInstructionDataArgs
    ),
    programAddress,
  } as ReleaseInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountAdminUsdcAta,
    TAccountUsdcMint,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ReleaseInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountAdminUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  /** Admin's USDC ATA */
  adminUsdcAta: Address<TAccountAdminUsdcAta>;
  /** USDC mint (must match fundraiser.usdc_mint) */
  usdcMint: Address<TAccountUsdcMint>;
  escrowVault: Address<TAccountEscrowVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  reitIdHash: ReleaseInstructionDataArgs['reitIdHash'];
};

export function getReleaseInstruction<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountAdminUsdcAta extends string,
  TAccountUsdcMint extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: ReleaseInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountAdminUsdcAta,
    TAccountUsdcMint,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): ReleaseInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountFundraiser,
  TAccountInvestment,
  TAccountAdminUsdcAta,
  TAccountUsdcMint,
  TAccountEscrowVault,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    adminUsdcAta: { value: input.adminUsdcAta ?? null, isWritable: true },
    usdcMint: { value: input.usdcMint ?? null, isWritable: false },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.adminUsdcAta),
      getAccountMeta(accounts.usdcMint),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getReleaseInstructionDataEncoder().encode(
      args as ReleaseInstructionDataArgs
    ),
    programAddress,
  } as ReleaseInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountAdminUsdcAta,
    TAccountUsdcMint,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedReleaseInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    fundraiser: TAccountMetas[1];
    investment: TAccountMetas[2];
    /** Admin's USDC ATA */
    adminUsdcAta: TAccountMetas[3];
    /** USDC mint (must match fundraiser.usdc_mint) */
    usdcMint: TAccountMetas[4];
    escrowVault: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
  };
  data: ReleaseInstructionData;
};

export function parseReleaseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedReleaseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      fundraiser: getNextAccount(),
      investment: getNextAccount(),
      adminUsdcAta: getNextAccount(),
      usdcMint: getNextAccount(),
      escrowVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getReleaseInstructionDataDecoder().decode(instruction.data),
  };
}
