/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WIRE_DISCRIMINATOR = new Uint8Array([
  133, 22, 177, 204, 246, 158, 29, 40,
]);

export function getWireDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(WIRE_DISCRIMINATOR);
}

export type WireInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountFundraiser extends string
        ? ReadonlyAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountInvestment extends string
        ? WritableAccount<TAccountInvestment>
        : TAccountInvestment,
      ...TRemainingAccounts,
    ]
  >;

export type WireInstructionData = {
  discriminator: ReadonlyUint8Array;
  reitIdHash: ReadonlyUint8Array;
};

export type WireInstructionDataArgs = { reitIdHash: ReadonlyUint8Array };

export function getWireInstructionDataEncoder(): FixedSizeEncoder<WireInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
    ]),
    (value) => ({ ...value, discriminator: WIRE_DISCRIMINATOR })
  );
}

export function getWireInstructionDataDecoder(): FixedSizeDecoder<WireInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getWireInstructionDataCodec(): FixedSizeCodec<
  WireInstructionDataArgs,
  WireInstructionData
> {
  return combineCodec(
    getWireInstructionDataEncoder(),
    getWireInstructionDataDecoder()
  );
}

export type WireAsyncInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser?: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  reitIdHash: WireInstructionDataArgs['reitIdHash'];
};

export async function getWireInstructionAsync<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: WireAsyncInput<TAccountAdmin, TAccountFundraiser, TAccountInvestment>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WireInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: false },
    investment: { value: input.investment ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
    ],
    data: getWireInstructionDataEncoder().encode(
      args as WireInstructionDataArgs
    ),
    programAddress,
  } as WireInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment
  >);
}

export type WireInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  reitIdHash: WireInstructionDataArgs['reitIdHash'];
};

export function getWireInstruction<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: WireInput<TAccountAdmin, TAccountFundraiser, TAccountInvestment>,
  config?: { programAddress?: TProgramAddress }
): WireInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountFundraiser,
  TAccountInvestment
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: false },
    investment: { value: input.investment ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
    ],
    data: getWireInstructionDataEncoder().encode(
      args as WireInstructionDataArgs
    ),
    programAddress,
  } as WireInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment
  >);
}

export type ParsedWireInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    fundraiser: TAccountMetas[1];
    investment: TAccountMetas[2];
  };
  data: WireInstructionData;
};

export function parseWireInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWireInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      fundraiser: getNextAccount(),
      investment: getNextAccount(),
    },
    data: getWireInstructionDataDecoder().decode(instruction.data),
  };
}
