/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ISSUE_SHARE_DISCRIMINATOR = new Uint8Array([
  195, 99, 172, 255, 224, 56, 233, 24,
]);

export function getIssueShareDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ISSUE_SHARE_DISCRIMINATOR);
}

export type IssueShareInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TAccountReitMint extends string | AccountMeta<string> = string,
  TAccountInvestorAta extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountFundraiser extends string
        ? ReadonlyAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountInvestment extends string
        ? WritableAccount<TAccountInvestment>
        : TAccountInvestment,
      TAccountReitMint extends string
        ? WritableAccount<TAccountReitMint>
        : TAccountReitMint,
      TAccountInvestorAta extends string
        ? WritableAccount<TAccountInvestorAta>
        : TAccountInvestorAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IssueShareInstructionData = {
  discriminator: ReadonlyUint8Array;
  reitIdHash: ReadonlyUint8Array;
};

export type IssueShareInstructionDataArgs = { reitIdHash: ReadonlyUint8Array };

export function getIssueShareInstructionDataEncoder(): FixedSizeEncoder<IssueShareInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
    ]),
    (value) => ({ ...value, discriminator: ISSUE_SHARE_DISCRIMINATOR })
  );
}

export function getIssueShareInstructionDataDecoder(): FixedSizeDecoder<IssueShareInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getIssueShareInstructionDataCodec(): FixedSizeCodec<
  IssueShareInstructionDataArgs,
  IssueShareInstructionData
> {
  return combineCodec(
    getIssueShareInstructionDataEncoder(),
    getIssueShareInstructionDataDecoder()
  );
}

export type IssueShareAsyncInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountReitMint extends string = string,
  TAccountInvestorAta extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser?: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  reitMint: Address<TAccountReitMint>;
  investorAta: Address<TAccountInvestorAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  reitIdHash: IssueShareInstructionDataArgs['reitIdHash'];
};

export async function getIssueShareInstructionAsync<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountReitMint extends string,
  TAccountInvestorAta extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: IssueShareAsyncInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: false },
    investment: { value: input.investment ?? null, isWritable: true },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    investorAta: { value: input.investorAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.investorAta),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getIssueShareInstructionDataEncoder().encode(
      args as IssueShareInstructionDataArgs
    ),
    programAddress,
  } as IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram
  >);
}

export type IssueShareInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountReitMint extends string = string,
  TAccountInvestorAta extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  reitMint: Address<TAccountReitMint>;
  investorAta: Address<TAccountInvestorAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  reitIdHash: IssueShareInstructionDataArgs['reitIdHash'];
};

export function getIssueShareInstruction<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountReitMint extends string,
  TAccountInvestorAta extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: IssueShareInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IssueShareInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountFundraiser,
  TAccountInvestment,
  TAccountReitMint,
  TAccountInvestorAta,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: false },
    investment: { value: input.investment ?? null, isWritable: true },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    investorAta: { value: input.investorAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.investorAta),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getIssueShareInstructionDataEncoder().encode(
      args as IssueShareInstructionDataArgs
    ),
    programAddress,
  } as IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram
  >);
}

export type ParsedIssueShareInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    fundraiser: TAccountMetas[1];
    investment: TAccountMetas[2];
    reitMint: TAccountMetas[3];
    investorAta: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: IssueShareInstructionData;
};

export function parseIssueShareInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIssueShareInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      fundraiser: getNextAccount(),
      investment: getNextAccount(),
      reitMint: getNextAccount(),
      investorAta: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getIssueShareInstructionDataDecoder().decode(instruction.data),
  };
}
