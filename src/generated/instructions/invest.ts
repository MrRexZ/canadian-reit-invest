/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INVEST_DISCRIMINATOR = new Uint8Array([
  13, 245, 180, 103, 254, 182, 121, 4,
]);

export function getInvestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INVEST_DISCRIMINATOR);
}

export type InvestInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountInvestorSigner extends string | AccountMeta<string> = string,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountInvestorFundraiser extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TAccountUsdcMint extends string | AccountMeta<string> = string,
  TAccountInvestorUsdcAta extends string | AccountMeta<string> = string,
  TAccountEscrowVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountInvestorSigner extends string
        ? WritableSignerAccount<TAccountInvestorSigner> &
            AccountSignerMeta<TAccountInvestorSigner>
        : TAccountInvestorSigner,
      TAccountInvestor extends string
        ? WritableAccount<TAccountInvestor>
        : TAccountInvestor,
      TAccountInvestorFundraiser extends string
        ? WritableAccount<TAccountInvestorFundraiser>
        : TAccountInvestorFundraiser,
      TAccountFundraiser extends string
        ? WritableAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountInvestment extends string
        ? WritableAccount<TAccountInvestment>
        : TAccountInvestment,
      TAccountUsdcMint extends string
        ? ReadonlyAccount<TAccountUsdcMint>
        : TAccountUsdcMint,
      TAccountInvestorUsdcAta extends string
        ? WritableAccount<TAccountInvestorUsdcAta>
        : TAccountInvestorUsdcAta,
      TAccountEscrowVault extends string
        ? WritableAccount<TAccountEscrowVault>
        : TAccountEscrowVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InvestInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  reitIdHash: ReadonlyUint8Array;
  counter: bigint;
};

export type InvestInstructionDataArgs = {
  amount: number | bigint;
  reitIdHash: ReadonlyUint8Array;
  counter: number | bigint;
};

export function getInvestInstructionDataEncoder(): FixedSizeEncoder<InvestInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
      ['counter', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVEST_DISCRIMINATOR })
  );
}

export function getInvestInstructionDataDecoder(): FixedSizeDecoder<InvestInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
    ['counter', getU64Decoder()],
  ]);
}

export function getInvestInstructionDataCodec(): FixedSizeCodec<
  InvestInstructionDataArgs,
  InvestInstructionData
> {
  return combineCodec(
    getInvestInstructionDataEncoder(),
    getInvestInstructionDataDecoder()
  );
}

export type InvestAsyncInput<
  TAccountInvestorSigner extends string = string,
  TAccountInvestor extends string = string,
  TAccountInvestorFundraiser extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountInvestorUsdcAta extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  investorSigner: TransactionSigner<TAccountInvestorSigner>;
  /** Investor PDA: init if needed so users don't have to pre-create it */
  investor?: Address<TAccountInvestor>;
  /** NEW: InvestorFundraiser PDA for per-fundraiser tracking */
  investorFundraiser?: Address<TAccountInvestorFundraiser>;
  fundraiser?: Address<TAccountFundraiser>;
  investment?: Address<TAccountInvestment>;
  /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
  usdcMint: Address<TAccountUsdcMint>;
  /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
  investorUsdcAta?: Address<TAccountInvestorUsdcAta>;
  escrowVault: Address<TAccountEscrowVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  amount: InvestInstructionDataArgs['amount'];
  reitIdHash: InvestInstructionDataArgs['reitIdHash'];
  counter: InvestInstructionDataArgs['counter'];
};

export async function getInvestInstructionAsync<
  TAccountInvestorSigner extends string,
  TAccountInvestor extends string,
  TAccountInvestorFundraiser extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountUsdcMint extends string,
  TAccountInvestorUsdcAta extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: InvestAsyncInput<
    TAccountInvestorSigner,
    TAccountInvestor,
    TAccountInvestorFundraiser,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountUsdcMint,
    TAccountInvestorUsdcAta,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InvestInstruction<
    TProgramAddress,
    TAccountInvestorSigner,
    TAccountInvestor,
    TAccountInvestorFundraiser,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountUsdcMint,
    TAccountInvestorUsdcAta,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investorSigner: { value: input.investorSigner ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
    investorFundraiser: {
      value: input.investorFundraiser ?? null,
      isWritable: true,
    },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    usdcMint: { value: input.usdcMint ?? null, isWritable: false },
    investorUsdcAta: { value: input.investorUsdcAta ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.investor.value) {
    accounts.investor.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 101, 115, 116, 111, 114])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.investorSigner.value)
        ),
      ],
    });
  }
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }
  if (!accounts.investorFundraiser.value) {
    accounts.investorFundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            105, 110, 118, 101, 115, 116, 111, 114, 95, 102, 117, 110, 100, 114,
            97, 105, 115, 101, 114,
          ])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.investorSigner.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.fundraiser.value)),
      ],
    });
  }
  if (!accounts.investment.value) {
    accounts.investment.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 101, 115, 116, 109, 101, 110, 116])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.investorSigner.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.fundraiser.value)),
        getU64Encoder().encode(expectSome(args.counter)),
      ],
    });
  }
  if (!accounts.investorUsdcAta.value) {
    accounts.investorUsdcAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.investorSigner.value)
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.usdcMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.investorSigner),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.investorFundraiser),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.usdcMint),
      getAccountMeta(accounts.investorUsdcAta),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInvestInstructionDataEncoder().encode(
      args as InvestInstructionDataArgs
    ),
    programAddress,
  } as InvestInstruction<
    TProgramAddress,
    TAccountInvestorSigner,
    TAccountInvestor,
    TAccountInvestorFundraiser,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountUsdcMint,
    TAccountInvestorUsdcAta,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type InvestInput<
  TAccountInvestorSigner extends string = string,
  TAccountInvestor extends string = string,
  TAccountInvestorFundraiser extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountInvestorUsdcAta extends string = string,
  TAccountEscrowVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  investorSigner: TransactionSigner<TAccountInvestorSigner>;
  /** Investor PDA: init if needed so users don't have to pre-create it */
  investor: Address<TAccountInvestor>;
  /** NEW: InvestorFundraiser PDA for per-fundraiser tracking */
  investorFundraiser: Address<TAccountInvestorFundraiser>;
  fundraiser: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
  usdcMint: Address<TAccountUsdcMint>;
  /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
  investorUsdcAta: Address<TAccountInvestorUsdcAta>;
  escrowVault: Address<TAccountEscrowVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  amount: InvestInstructionDataArgs['amount'];
  reitIdHash: InvestInstructionDataArgs['reitIdHash'];
  counter: InvestInstructionDataArgs['counter'];
};

export function getInvestInstruction<
  TAccountInvestorSigner extends string,
  TAccountInvestor extends string,
  TAccountInvestorFundraiser extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountUsdcMint extends string,
  TAccountInvestorUsdcAta extends string,
  TAccountEscrowVault extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: InvestInput<
    TAccountInvestorSigner,
    TAccountInvestor,
    TAccountInvestorFundraiser,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountUsdcMint,
    TAccountInvestorUsdcAta,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): InvestInstruction<
  TProgramAddress,
  TAccountInvestorSigner,
  TAccountInvestor,
  TAccountInvestorFundraiser,
  TAccountFundraiser,
  TAccountInvestment,
  TAccountUsdcMint,
  TAccountInvestorUsdcAta,
  TAccountEscrowVault,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    investorSigner: { value: input.investorSigner ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
    investorFundraiser: {
      value: input.investorFundraiser ?? null,
      isWritable: true,
    },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    usdcMint: { value: input.usdcMint ?? null, isWritable: false },
    investorUsdcAta: { value: input.investorUsdcAta ?? null, isWritable: true },
    escrowVault: { value: input.escrowVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.investorSigner),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.investorFundraiser),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.usdcMint),
      getAccountMeta(accounts.investorUsdcAta),
      getAccountMeta(accounts.escrowVault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInvestInstructionDataEncoder().encode(
      args as InvestInstructionDataArgs
    ),
    programAddress,
  } as InvestInstruction<
    TProgramAddress,
    TAccountInvestorSigner,
    TAccountInvestor,
    TAccountInvestorFundraiser,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountUsdcMint,
    TAccountInvestorUsdcAta,
    TAccountEscrowVault,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedInvestInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    investorSigner: TAccountMetas[0];
    /** Investor PDA: init if needed so users don't have to pre-create it */
    investor: TAccountMetas[1];
    /** NEW: InvestorFundraiser PDA for per-fundraiser tracking */
    investorFundraiser: TAccountMetas[2];
    fundraiser: TAccountMetas[3];
    investment: TAccountMetas[4];
    /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
    usdcMint: TAccountMetas[5];
    /** Investor's USDC ATA. Create it if missing so users don't have to pre-create their ATA. */
    investorUsdcAta: TAccountMetas[6];
    escrowVault: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    systemProgram: TAccountMetas[10];
    rent: TAccountMetas[11];
  };
  data: InvestInstructionData;
};

export function parseInvestInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInvestInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      investorSigner: getNextAccount(),
      investor: getNextAccount(),
      investorFundraiser: getNextAccount(),
      fundraiser: getNextAccount(),
      investment: getNextAccount(),
      usdcMint: getNextAccount(),
      investorUsdcAta: getNextAccount(),
      escrowVault: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInvestInstructionDataDecoder().decode(instruction.data),
  };
}
