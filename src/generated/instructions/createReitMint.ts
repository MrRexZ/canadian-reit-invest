/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CREATE_REIT_MINT_DISCRIMINATOR = new Uint8Array([
  232, 51, 175, 47, 142, 150, 194, 219,
]);

export function getCreateReitMintDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_REIT_MINT_DISCRIMINATOR
  );
}

export type CreateReitMintInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountReitMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TAccountMetadata extends string | AccountMeta<string> = string,
  TAccountTokenMetadataProgram extends
    | string
    | AccountMeta<string> = 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountFundraiser extends string
        ? WritableAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountReitMint extends string
        ? WritableSignerAccount<TAccountReitMint> &
            AccountSignerMeta<TAccountReitMint>
        : TAccountReitMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountMetadata extends string
        ? WritableAccount<TAccountMetadata>
        : TAccountMetadata,
      TAccountTokenMetadataProgram extends string
        ? ReadonlyAccount<TAccountTokenMetadataProgram>
        : TAccountTokenMetadataProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateReitMintInstructionData = {
  discriminator: ReadonlyUint8Array;
  reitIdHash: ReadonlyUint8Array;
  name: string;
  symbol: string;
  metadataUri: string;
};

export type CreateReitMintInstructionDataArgs = {
  reitIdHash: ReadonlyUint8Array;
  name: string;
  symbol: string;
  metadataUri: string;
};

export function getCreateReitMintInstructionDataEncoder(): Encoder<CreateReitMintInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['symbol', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['metadataUri', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CREATE_REIT_MINT_DISCRIMINATOR })
  );
}

export function getCreateReitMintInstructionDataDecoder(): Decoder<CreateReitMintInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['symbol', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['metadataUri', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCreateReitMintInstructionDataCodec(): Codec<
  CreateReitMintInstructionDataArgs,
  CreateReitMintInstructionData
> {
  return combineCodec(
    getCreateReitMintInstructionDataEncoder(),
    getCreateReitMintInstructionDataDecoder()
  );
}

export type CreateReitMintAsyncInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountReitMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser?: Address<TAccountFundraiser>;
  reitMint: TransactionSigner<TAccountReitMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  metadata: Address<TAccountMetadata>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  reitIdHash: CreateReitMintInstructionDataArgs['reitIdHash'];
  name: CreateReitMintInstructionDataArgs['name'];
  symbol: CreateReitMintInstructionDataArgs['symbol'];
  metadataUri: CreateReitMintInstructionDataArgs['metadataUri'];
};

export async function getCreateReitMintInstructionAsync<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountReitMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountMetadata extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: CreateReitMintAsyncInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountReitMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountMetadata,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateReitMintInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountReitMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountMetadata,
    TAccountTokenMetadataProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    data: getCreateReitMintInstructionDataEncoder().encode(
      args as CreateReitMintInstructionDataArgs
    ),
    programAddress,
  } as CreateReitMintInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountReitMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountMetadata,
    TAccountTokenMetadataProgram
  >);
}

export type CreateReitMintInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountReitMint extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountMetadata extends string = string,
  TAccountTokenMetadataProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser: Address<TAccountFundraiser>;
  reitMint: TransactionSigner<TAccountReitMint>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  metadata: Address<TAccountMetadata>;
  tokenMetadataProgram?: Address<TAccountTokenMetadataProgram>;
  reitIdHash: CreateReitMintInstructionDataArgs['reitIdHash'];
  name: CreateReitMintInstructionDataArgs['name'];
  symbol: CreateReitMintInstructionDataArgs['symbol'];
  metadataUri: CreateReitMintInstructionDataArgs['metadataUri'];
};

export function getCreateReitMintInstruction<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountReitMint extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountMetadata extends string,
  TAccountTokenMetadataProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: CreateReitMintInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountReitMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountMetadata,
    TAccountTokenMetadataProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateReitMintInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountFundraiser,
  TAccountReitMint,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountMetadata,
  TAccountTokenMetadataProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    metadata: { value: input.metadata ?? null, isWritable: true },
    tokenMetadataProgram: {
      value: input.tokenMetadataProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }
  if (!accounts.tokenMetadataProgram.value) {
    accounts.tokenMetadataProgram.value =
      'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s' as Address<'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.metadata),
      getAccountMeta(accounts.tokenMetadataProgram),
    ],
    data: getCreateReitMintInstructionDataEncoder().encode(
      args as CreateReitMintInstructionDataArgs
    ),
    programAddress,
  } as CreateReitMintInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountReitMint,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountMetadata,
    TAccountTokenMetadataProgram
  >);
}

export type ParsedCreateReitMintInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    fundraiser: TAccountMetas[1];
    reitMint: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    rent: TAccountMetas[5];
    metadata: TAccountMetas[6];
    tokenMetadataProgram: TAccountMetas[7];
  };
  data: CreateReitMintInstructionData;
};

export function parseCreateReitMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateReitMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      fundraiser: getNextAccount(),
      reitMint: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      metadata: getNextAccount(),
      tokenMetadataProgram: getNextAccount(),
    },
    data: getCreateReitMintInstructionDataDecoder().decode(instruction.data),
  };
}
