/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedGreetInstruction } from '../instructions';

export const CANADIANREITINVEST_PROGRAM_ADDRESS =
  '7s6k4nDF8z1hbHMxGeDqovfjqUG28L4ikjMVY6DQVm6B' as Address<'7s6k4nDF8z1hbHMxGeDqovfjqUG28L4ikjMVY6DQVm6B'>;

export enum CanadianreitinvestInstruction {
  Greet,
}

export function identifyCanadianreitinvestInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CanadianreitinvestInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 194, 3, 150, 228, 58, 181, 62])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.Greet;
  }
  throw new Error(
    'The provided instruction could not be identified as a canadianreitinvest instruction.'
  );
}

export type ParsedCanadianreitinvestInstruction<
  TProgram extends string = '7s6k4nDF8z1hbHMxGeDqovfjqUG28L4ikjMVY6DQVm6B',
> = {
  instructionType: CanadianreitinvestInstruction.Greet;
} & ParsedGreetInstruction<TProgram>;
