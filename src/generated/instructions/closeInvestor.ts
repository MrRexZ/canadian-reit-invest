/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLOSE_INVESTOR_DISCRIMINATOR = new Uint8Array([
  243, 111, 117, 71, 42, 130, 10, 195,
]);

export function getCloseInvestorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_INVESTOR_DISCRIMINATOR
  );
}

export type CloseInvestorInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountInvestor extends string
        ? WritableAccount<TAccountInvestor>
        : TAccountInvestor,
      ...TRemainingAccounts,
    ]
  >;

export type CloseInvestorInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseInvestorInstructionDataArgs = {};

export function getCloseInvestorInstructionDataEncoder(): FixedSizeEncoder<CloseInvestorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_INVESTOR_DISCRIMINATOR })
  );
}

export function getCloseInvestorInstructionDataDecoder(): FixedSizeDecoder<CloseInvestorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseInvestorInstructionDataCodec(): FixedSizeCodec<
  CloseInvestorInstructionDataArgs,
  CloseInvestorInstructionData
> {
  return combineCodec(
    getCloseInvestorInstructionDataEncoder(),
    getCloseInvestorInstructionDataDecoder()
  );
}

export type CloseInvestorAsyncInput<
  TAccountSigner extends string = string,
  TAccountInvestor extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  investor?: Address<TAccountInvestor>;
};

export async function getCloseInvestorInstructionAsync<
  TAccountSigner extends string,
  TAccountInvestor extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: CloseInvestorAsyncInput<TAccountSigner, TAccountInvestor>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CloseInvestorInstruction<TProgramAddress, TAccountSigner, TAccountInvestor>
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.investor.value) {
    accounts.investor.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 101, 115, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.investor),
    ],
    data: getCloseInvestorInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInvestorInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountInvestor
  >);
}

export type CloseInvestorInput<
  TAccountSigner extends string = string,
  TAccountInvestor extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  investor: Address<TAccountInvestor>;
};

export function getCloseInvestorInstruction<
  TAccountSigner extends string,
  TAccountInvestor extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: CloseInvestorInput<TAccountSigner, TAccountInvestor>,
  config?: { programAddress?: TProgramAddress }
): CloseInvestorInstruction<TProgramAddress, TAccountSigner, TAccountInvestor> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.investor),
    ],
    data: getCloseInvestorInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseInvestorInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountInvestor
  >);
}

export type ParsedCloseInvestorInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    investor: TAccountMetas[1];
  };
  data: CloseInvestorInstructionData;
};

export function parseCloseInvestorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseInvestorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { signer: getNextAccount(), investor: getNextAccount() },
    data: getCloseInvestorInstructionDataDecoder().decode(instruction.data),
  };
}
