/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';

/** InsufficientFunds: Insufficient funds */
export const CANADIANREITINVEST_ERROR__INSUFFICIENT_FUNDS = 0x1770; // 6000
/** InvalidAmount: Invalid amount */
export const CANADIANREITINVEST_ERROR__INVALID_AMOUNT = 0x1771; // 6001
/** InvalidAuthority: Invalid authority */
export const CANADIANREITINVEST_ERROR__INVALID_AUTHORITY = 0x1772; // 6002
/** EscrowNotInitialized: Escrow not initialized */
export const CANADIANREITINVEST_ERROR__ESCROW_NOT_INITIALIZED = 0x1773; // 6003
/** InvestmentCounterOverflow: Investment counter overflow */
export const CANADIANREITINVEST_ERROR__INVESTMENT_COUNTER_OVERFLOW = 0x1774; // 6004
/** ArithmeticOverflow: Arithmetic overflow */
export const CANADIANREITINVEST_ERROR__ARITHMETIC_OVERFLOW = 0x1775; // 6005
/** InvalidReitIdHash: Invalid REIT ID hash */
export const CANADIANREITINVEST_ERROR__INVALID_REIT_ID_HASH = 0x1776; // 6006

export type CanadianreitinvestError =
  | typeof CANADIANREITINVEST_ERROR__ARITHMETIC_OVERFLOW
  | typeof CANADIANREITINVEST_ERROR__ESCROW_NOT_INITIALIZED
  | typeof CANADIANREITINVEST_ERROR__INSUFFICIENT_FUNDS
  | typeof CANADIANREITINVEST_ERROR__INVALID_AMOUNT
  | typeof CANADIANREITINVEST_ERROR__INVALID_AUTHORITY
  | typeof CANADIANREITINVEST_ERROR__INVALID_REIT_ID_HASH
  | typeof CANADIANREITINVEST_ERROR__INVESTMENT_COUNTER_OVERFLOW;

let canadianreitinvestErrorMessages:
  | Record<CanadianreitinvestError, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  canadianreitinvestErrorMessages = {
    [CANADIANREITINVEST_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [CANADIANREITINVEST_ERROR__ESCROW_NOT_INITIALIZED]: `Escrow not initialized`,
    [CANADIANREITINVEST_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds`,
    [CANADIANREITINVEST_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [CANADIANREITINVEST_ERROR__INVALID_AUTHORITY]: `Invalid authority`,
    [CANADIANREITINVEST_ERROR__INVALID_REIT_ID_HASH]: `Invalid REIT ID hash`,
    [CANADIANREITINVEST_ERROR__INVESTMENT_COUNTER_OVERFLOW]: `Investment counter overflow`,
  };
}

export function getCanadianreitinvestErrorMessage(
  code: CanadianreitinvestError
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      canadianreitinvestErrorMessages as Record<CanadianreitinvestError, string>
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isCanadianreitinvestError<
  TProgramErrorCode extends CanadianreitinvestError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    CANADIANREITINVEST_PROGRAM_ADDRESS,
    code
  );
}
