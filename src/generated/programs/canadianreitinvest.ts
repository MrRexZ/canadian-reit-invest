/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedInitializeFundraiserInstruction } from '../instructions';

export const CANADIANREITINVEST_PROGRAM_ADDRESS =
  'HKE3kVkw621wdSJmsaZxHxLK1TaHQevvGAUh9Z3YxH7B' as Address<'HKE3kVkw621wdSJmsaZxHxLK1TaHQevvGAUh9Z3YxH7B'>;

export enum CanadianreitinvestAccount {
  Fundraiser,
  ReitMintMetadata,
}

export function identifyCanadianreitinvestAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CanadianreitinvestAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 106, 143, 202, 135, 131, 204, 196])
      ),
      0
    )
  ) {
    return CanadianreitinvestAccount.Fundraiser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 203, 205, 100, 252, 27, 87, 105])
      ),
      0
    )
  ) {
    return CanadianreitinvestAccount.ReitMintMetadata;
  }
  throw new Error(
    'The provided account could not be identified as a canadianreitinvest account.'
  );
}

export enum CanadianreitinvestInstruction {
  InitializeFundraiser,
}

export function identifyCanadianreitinvestInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CanadianreitinvestInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 33, 110, 191, 226, 23, 151, 31])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.InitializeFundraiser;
  }
  throw new Error(
    'The provided instruction could not be identified as a canadianreitinvest instruction.'
  );
}

export type ParsedCanadianreitinvestInstruction<
  TProgram extends string = 'HKE3kVkw621wdSJmsaZxHxLK1TaHQevvGAUh9Z3YxH7B',
> = {
  instructionType: CanadianreitinvestInstruction.InitializeFundraiser;
} & ParsedInitializeFundraiserInstruction<TProgram>;
