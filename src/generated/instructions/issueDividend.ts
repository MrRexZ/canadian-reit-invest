/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ISSUE_DIVIDEND_DISCRIMINATOR = new Uint8Array([
  143, 141, 2, 140, 130, 248, 167, 67,
]);

export function getIssueDividendDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ISSUE_DIVIDEND_DISCRIMINATOR
  );
}

export type IssueDividendInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountAdminUsdcAta extends string | AccountMeta<string> = string,
  TAccountInvestorUsdcAta extends string | AccountMeta<string> = string,
  TAccountUsdcMint extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountInvestment extends string
        ? ReadonlyAccount<TAccountInvestment>
        : TAccountInvestment,
      TAccountInvestor extends string
        ? ReadonlyAccount<TAccountInvestor>
        : TAccountInvestor,
      TAccountFundraiser extends string
        ? ReadonlyAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountAdminUsdcAta extends string
        ? WritableAccount<TAccountAdminUsdcAta>
        : TAccountAdminUsdcAta,
      TAccountInvestorUsdcAta extends string
        ? WritableAccount<TAccountInvestorUsdcAta>
        : TAccountInvestorUsdcAta,
      TAccountUsdcMint extends string
        ? ReadonlyAccount<TAccountUsdcMint>
        : TAccountUsdcMint,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IssueDividendInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type IssueDividendInstructionDataArgs = { amount: number | bigint };

export function getIssueDividendInstructionDataEncoder(): FixedSizeEncoder<IssueDividendInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ISSUE_DIVIDEND_DISCRIMINATOR })
  );
}

export function getIssueDividendInstructionDataDecoder(): FixedSizeDecoder<IssueDividendInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getIssueDividendInstructionDataCodec(): FixedSizeCodec<
  IssueDividendInstructionDataArgs,
  IssueDividendInstructionData
> {
  return combineCodec(
    getIssueDividendInstructionDataEncoder(),
    getIssueDividendInstructionDataDecoder()
  );
}

export type IssueDividendInput<
  TAccountAdmin extends string = string,
  TAccountInvestment extends string = string,
  TAccountInvestor extends string = string,
  TAccountFundraiser extends string = string,
  TAccountAdminUsdcAta extends string = string,
  TAccountInvestorUsdcAta extends string = string,
  TAccountUsdcMint extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Admin who signs and authorizes the dividend payment */
  admin: TransactionSigner<TAccountAdmin>;
  /**
   * Investment PDA to validate investor eligibility
   * Must have ShareIssued status
   */
  investment: Address<TAccountInvestment>;
  /** Investor receiving the dividend (derived from investment) */
  investor: Address<TAccountInvestor>;
  /** Fundraiser PDA for admin authorization check */
  fundraiser: Address<TAccountFundraiser>;
  /** Admin's USDC token account (source of dividend) */
  adminUsdcAta: Address<TAccountAdminUsdcAta>;
  /** Investor's USDC token account (destination for dividend) */
  investorUsdcAta: Address<TAccountInvestorUsdcAta>;
  /** USDC mint for validation */
  usdcMint: Address<TAccountUsdcMint>;
  /** Token program for transfer */
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: IssueDividendInstructionDataArgs['amount'];
};

export function getIssueDividendInstruction<
  TAccountAdmin extends string,
  TAccountInvestment extends string,
  TAccountInvestor extends string,
  TAccountFundraiser extends string,
  TAccountAdminUsdcAta extends string,
  TAccountInvestorUsdcAta extends string,
  TAccountUsdcMint extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: IssueDividendInput<
    TAccountAdmin,
    TAccountInvestment,
    TAccountInvestor,
    TAccountFundraiser,
    TAccountAdminUsdcAta,
    TAccountInvestorUsdcAta,
    TAccountUsdcMint,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): IssueDividendInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountInvestment,
  TAccountInvestor,
  TAccountFundraiser,
  TAccountAdminUsdcAta,
  TAccountInvestorUsdcAta,
  TAccountUsdcMint,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: false },
    investor: { value: input.investor ?? null, isWritable: false },
    fundraiser: { value: input.fundraiser ?? null, isWritable: false },
    adminUsdcAta: { value: input.adminUsdcAta ?? null, isWritable: true },
    investorUsdcAta: { value: input.investorUsdcAta ?? null, isWritable: true },
    usdcMint: { value: input.usdcMint ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.adminUsdcAta),
      getAccountMeta(accounts.investorUsdcAta),
      getAccountMeta(accounts.usdcMint),
      getAccountMeta(accounts.tokenProgram),
    ],
    data: getIssueDividendInstructionDataEncoder().encode(
      args as IssueDividendInstructionDataArgs
    ),
    programAddress,
  } as IssueDividendInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountInvestment,
    TAccountInvestor,
    TAccountFundraiser,
    TAccountAdminUsdcAta,
    TAccountInvestorUsdcAta,
    TAccountUsdcMint,
    TAccountTokenProgram
  >);
}

export type ParsedIssueDividendInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Admin who signs and authorizes the dividend payment */
    admin: TAccountMetas[0];
    /**
     * Investment PDA to validate investor eligibility
     * Must have ShareIssued status
     */
    investment: TAccountMetas[1];
    /** Investor receiving the dividend (derived from investment) */
    investor: TAccountMetas[2];
    /** Fundraiser PDA for admin authorization check */
    fundraiser: TAccountMetas[3];
    /** Admin's USDC token account (source of dividend) */
    adminUsdcAta: TAccountMetas[4];
    /** Investor's USDC token account (destination for dividend) */
    investorUsdcAta: TAccountMetas[5];
    /** USDC mint for validation */
    usdcMint: TAccountMetas[6];
    /** Token program for transfer */
    tokenProgram: TAccountMetas[7];
  };
  data: IssueDividendInstructionData;
};

export function parseIssueDividendInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIssueDividendInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      investment: getNextAccount(),
      investor: getNextAccount(),
      fundraiser: getNextAccount(),
      adminUsdcAta: getNextAccount(),
      investorUsdcAta: getNextAccount(),
      usdcMint: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getIssueDividendInstructionDataDecoder().decode(instruction.data),
  };
}
