/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const FUNDRAISER_DISCRIMINATOR = new Uint8Array([
  167, 106, 143, 202, 135, 131, 204, 196,
]);

export function getFundraiserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(FUNDRAISER_DISCRIMINATOR);
}

export type Fundraiser = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  usdcMint: Address;
  reitMint: Address;
  escrowVault: Address;
  totalRaised: bigint;
  releasedAmount: bigint;
  reitId: string;
  investmentCounter: bigint;
  bump: number;
  reitAcceptedCurrency: string;
};

export type FundraiserArgs = {
  admin: Address;
  usdcMint: Address;
  reitMint: Address;
  escrowVault: Address;
  totalRaised: number | bigint;
  releasedAmount: number | bigint;
  reitId: string;
  investmentCounter: number | bigint;
  bump: number;
  reitAcceptedCurrency: string;
};

export function getFundraiserEncoder(): Encoder<FundraiserArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['usdcMint', getAddressEncoder()],
      ['reitMint', getAddressEncoder()],
      ['escrowVault', getAddressEncoder()],
      ['totalRaised', getU64Encoder()],
      ['releasedAmount', getU64Encoder()],
      ['reitId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['investmentCounter', getU64Encoder()],
      ['bump', getU8Encoder()],
      [
        'reitAcceptedCurrency',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: FUNDRAISER_DISCRIMINATOR })
  );
}

export function getFundraiserDecoder(): Decoder<Fundraiser> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['usdcMint', getAddressDecoder()],
    ['reitMint', getAddressDecoder()],
    ['escrowVault', getAddressDecoder()],
    ['totalRaised', getU64Decoder()],
    ['releasedAmount', getU64Decoder()],
    ['reitId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['investmentCounter', getU64Decoder()],
    ['bump', getU8Decoder()],
    [
      'reitAcceptedCurrency',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
  ]);
}

export function getFundraiserCodec(): Codec<FundraiserArgs, Fundraiser> {
  return combineCodec(getFundraiserEncoder(), getFundraiserDecoder());
}

export function decodeFundraiser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Fundraiser, TAddress>;
export function decodeFundraiser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Fundraiser, TAddress>;
export function decodeFundraiser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Fundraiser, TAddress> | MaybeAccount<Fundraiser, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFundraiserDecoder()
  );
}

export async function fetchFundraiser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Fundraiser, TAddress>> {
  const maybeAccount = await fetchMaybeFundraiser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFundraiser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Fundraiser, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFundraiser(maybeAccount);
}

export async function fetchAllFundraiser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Fundraiser>[]> {
  const maybeAccounts = await fetchAllMaybeFundraiser(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFundraiser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Fundraiser>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeFundraiser(maybeAccount));
}
