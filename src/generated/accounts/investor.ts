/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const INVESTOR_DISCRIMINATOR = new Uint8Array([
  174, 129, 17, 83, 36, 116, 26, 196,
]);

export function getInvestorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INVESTOR_DISCRIMINATOR);
}

export type Investor = {
  discriminator: ReadonlyUint8Array;
  investorPubkey: Address;
  bump: number;
};

export type InvestorArgs = { investorPubkey: Address; bump: number };

export function getInvestorEncoder(): FixedSizeEncoder<InvestorArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['investorPubkey', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVESTOR_DISCRIMINATOR })
  );
}

export function getInvestorDecoder(): FixedSizeDecoder<Investor> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['investorPubkey', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInvestorCodec(): FixedSizeCodec<InvestorArgs, Investor> {
  return combineCodec(getInvestorEncoder(), getInvestorDecoder());
}

export function decodeInvestor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Investor, TAddress>;
export function decodeInvestor<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Investor, TAddress>;
export function decodeInvestor<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Investor, TAddress> | MaybeAccount<Investor, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInvestorDecoder()
  );
}

export async function fetchInvestor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Investor, TAddress>> {
  const maybeAccount = await fetchMaybeInvestor(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInvestor<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Investor, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInvestor(maybeAccount);
}

export async function fetchAllInvestor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Investor>[]> {
  const maybeAccounts = await fetchAllMaybeInvestor(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInvestor(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Investor>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeInvestor(maybeAccount));
}

export function getInvestorSize(): number {
  return 41;
}
