/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const INVESTOR_FUNDRAISER_DISCRIMINATOR = new Uint8Array([
  9, 157, 88, 28, 2, 147, 58, 109,
]);

export function getInvestorFundraiserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INVESTOR_FUNDRAISER_DISCRIMINATOR
  );
}

export type InvestorFundraiser = {
  discriminator: ReadonlyUint8Array;
  investor: Address;
  fundraiser: Address;
  investmentCounter: bigint;
  bump: number;
};

export type InvestorFundraiserArgs = {
  investor: Address;
  fundraiser: Address;
  investmentCounter: number | bigint;
  bump: number;
};

export function getInvestorFundraiserEncoder(): FixedSizeEncoder<InvestorFundraiserArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['investor', getAddressEncoder()],
      ['fundraiser', getAddressEncoder()],
      ['investmentCounter', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVESTOR_FUNDRAISER_DISCRIMINATOR })
  );
}

export function getInvestorFundraiserDecoder(): FixedSizeDecoder<InvestorFundraiser> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['investor', getAddressDecoder()],
    ['fundraiser', getAddressDecoder()],
    ['investmentCounter', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInvestorFundraiserCodec(): FixedSizeCodec<
  InvestorFundraiserArgs,
  InvestorFundraiser
> {
  return combineCodec(
    getInvestorFundraiserEncoder(),
    getInvestorFundraiserDecoder()
  );
}

export function decodeInvestorFundraiser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<InvestorFundraiser, TAddress>;
export function decodeInvestorFundraiser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<InvestorFundraiser, TAddress>;
export function decodeInvestorFundraiser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<InvestorFundraiser, TAddress>
  | MaybeAccount<InvestorFundraiser, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInvestorFundraiserDecoder()
  );
}

export async function fetchInvestorFundraiser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<InvestorFundraiser, TAddress>> {
  const maybeAccount = await fetchMaybeInvestorFundraiser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInvestorFundraiser<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<InvestorFundraiser, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInvestorFundraiser(maybeAccount);
}

export async function fetchAllInvestorFundraiser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<InvestorFundraiser>[]> {
  const maybeAccounts = await fetchAllMaybeInvestorFundraiser(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInvestorFundraiser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<InvestorFundraiser>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeInvestorFundraiser(maybeAccount)
  );
}

export function getInvestorFundraiserSize(): number {
  return 81;
}
