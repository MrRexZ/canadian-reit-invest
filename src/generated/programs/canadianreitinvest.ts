/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCloseInvestorInstruction,
  type ParsedCreateMintInstruction,
  type ParsedInitializeFundraiserInstruction,
  type ParsedInitializeInvestorInstruction,
  type ParsedInvestInstruction,
  type ParsedIssueShareInstruction,
  type ParsedRefundInstruction,
  type ParsedReleaseInstruction,
  type ParsedWireInstruction,
} from '../instructions';

export const CANADIANREITINVEST_PROGRAM_ADDRESS =
  'FuEhMFWU9Ui35a9mpavfy7AYGqEX8diUSk1CZonEUivH' as Address<'FuEhMFWU9Ui35a9mpavfy7AYGqEX8diUSk1CZonEUivH'>;

export enum CanadianreitinvestAccount {
  Fundraiser,
  Investment,
  Investor,
}

export function identifyCanadianreitinvestAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CanadianreitinvestAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([167, 106, 143, 202, 135, 131, 204, 196])
      ),
      0
    )
  ) {
    return CanadianreitinvestAccount.Fundraiser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 134, 9, 175, 115, 153, 39, 28])
      ),
      0
    )
  ) {
    return CanadianreitinvestAccount.Investment;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([174, 129, 17, 83, 36, 116, 26, 196])
      ),
      0
    )
  ) {
    return CanadianreitinvestAccount.Investor;
  }
  throw new Error(
    'The provided account could not be identified as a canadianreitinvest account.'
  );
}

export enum CanadianreitinvestInstruction {
  CloseInvestor,
  CreateMint,
  InitializeFundraiser,
  InitializeInvestor,
  Invest,
  IssueShare,
  Refund,
  Release,
  Wire,
}

export function identifyCanadianreitinvestInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CanadianreitinvestInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([243, 111, 117, 71, 42, 130, 10, 195])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.CloseInvestor;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 44, 215, 132, 253, 214, 41, 45])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.CreateMint;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 33, 110, 191, 226, 23, 151, 31])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.InitializeFundraiser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([12, 105, 129, 28, 138, 149, 223, 135])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.InitializeInvestor;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 245, 180, 103, 254, 182, 121, 4])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.Invest;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 99, 172, 255, 224, 56, 233, 24])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.IssueShare;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 96, 183, 251, 63, 208, 46, 46])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.Refund;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 249, 15, 206, 28, 127, 193, 241])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.Release;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 22, 177, 204, 246, 158, 29, 40])
      ),
      0
    )
  ) {
    return CanadianreitinvestInstruction.Wire;
  }
  throw new Error(
    'The provided instruction could not be identified as a canadianreitinvest instruction.'
  );
}

export type ParsedCanadianreitinvestInstruction<
  TProgram extends string = 'FuEhMFWU9Ui35a9mpavfy7AYGqEX8diUSk1CZonEUivH',
> =
  | ({
      instructionType: CanadianreitinvestInstruction.CloseInvestor;
    } & ParsedCloseInvestorInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.CreateMint;
    } & ParsedCreateMintInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.InitializeFundraiser;
    } & ParsedInitializeFundraiserInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.InitializeInvestor;
    } & ParsedInitializeInvestorInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.Invest;
    } & ParsedInvestInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.IssueShare;
    } & ParsedIssueShareInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.Refund;
    } & ParsedRefundInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.Release;
    } & ParsedReleaseInstruction<TProgram>)
  | ({
      instructionType: CanadianreitinvestInstruction.Wire;
    } & ParsedWireInstruction<TProgram>);
