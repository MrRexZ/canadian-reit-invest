/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ISSUE_SHARE_DISCRIMINATOR = new Uint8Array([
  195, 99, 172, 255, 224, 56, 233, 24,
]);

export function getIssueShareDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(ISSUE_SHARE_DISCRIMINATOR);
}

export type IssueShareInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountAdmin extends string | AccountMeta<string> = string,
  TAccountFundraiser extends string | AccountMeta<string> = string,
  TAccountInvestment extends string | AccountMeta<string> = string,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountInvestorWallet extends string | AccountMeta<string> = string,
  TAccountReitMint extends string | AccountMeta<string> = string,
  TAccountInvestorAta extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountRent extends
    | string
    | AccountMeta<string> = 'SysvarRent111111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            AccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountFundraiser extends string
        ? WritableAccount<TAccountFundraiser>
        : TAccountFundraiser,
      TAccountInvestment extends string
        ? WritableAccount<TAccountInvestment>
        : TAccountInvestment,
      TAccountInvestor extends string
        ? ReadonlyAccount<TAccountInvestor>
        : TAccountInvestor,
      TAccountInvestorWallet extends string
        ? ReadonlyAccount<TAccountInvestorWallet>
        : TAccountInvestorWallet,
      TAccountReitMint extends string
        ? WritableAccount<TAccountReitMint>
        : TAccountReitMint,
      TAccountInvestorAta extends string
        ? WritableAccount<TAccountInvestorAta>
        : TAccountInvestorAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type IssueShareInstructionData = {
  discriminator: ReadonlyUint8Array;
  investorPubkey: Address;
  reitIdHash: ReadonlyUint8Array;
  sharePrice: bigint;
};

export type IssueShareInstructionDataArgs = {
  investorPubkey: Address;
  reitIdHash: ReadonlyUint8Array;
  sharePrice: number | bigint;
};

export function getIssueShareInstructionDataEncoder(): FixedSizeEncoder<IssueShareInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['investorPubkey', getAddressEncoder()],
      ['reitIdHash', fixEncoderSize(getBytesEncoder(), 16)],
      ['sharePrice', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ISSUE_SHARE_DISCRIMINATOR })
  );
}

export function getIssueShareInstructionDataDecoder(): FixedSizeDecoder<IssueShareInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['investorPubkey', getAddressDecoder()],
    ['reitIdHash', fixDecoderSize(getBytesDecoder(), 16)],
    ['sharePrice', getU64Decoder()],
  ]);
}

export function getIssueShareInstructionDataCodec(): FixedSizeCodec<
  IssueShareInstructionDataArgs,
  IssueShareInstructionData
> {
  return combineCodec(
    getIssueShareInstructionDataEncoder(),
    getIssueShareInstructionDataDecoder()
  );
}

export type IssueShareAsyncInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountInvestor extends string = string,
  TAccountInvestorWallet extends string = string,
  TAccountReitMint extends string = string,
  TAccountInvestorAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser?: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  investor?: Address<TAccountInvestor>;
  /** Investor wallet - needed as the ATA authority (not a signer for this instruction) */
  investorWallet: Address<TAccountInvestorWallet>;
  reitMint: Address<TAccountReitMint>;
  investorAta?: Address<TAccountInvestorAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  investorPubkey: IssueShareInstructionDataArgs['investorPubkey'];
  reitIdHash: IssueShareInstructionDataArgs['reitIdHash'];
  sharePrice: IssueShareInstructionDataArgs['sharePrice'];
};

export async function getIssueShareInstructionAsync<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountInvestor extends string,
  TAccountInvestorWallet extends string,
  TAccountReitMint extends string,
  TAccountInvestorAta extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: IssueShareAsyncInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountInvestor,
    TAccountInvestorWallet,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountInvestor,
    TAccountInvestorWallet,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: false },
    investorWallet: { value: input.investorWallet ?? null, isWritable: false },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    investorAta: { value: input.investorAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fundraiser.value) {
    accounts.fundraiser.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 117, 110, 100, 114, 97, 105, 115, 101, 114])
        ),
        fixEncoderSize(getBytesEncoder(), 16).encode(
          expectSome(args.reitIdHash)
        ),
      ],
    });
  }
  if (!accounts.investor.value) {
    accounts.investor.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 101, 115, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectSome(args.investorPubkey)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.investorAta.value) {
    accounts.investorAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.investorWallet.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.reitMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.investorWallet),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.investorAta),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getIssueShareInstructionDataEncoder().encode(
      args as IssueShareInstructionDataArgs
    ),
    programAddress,
  } as IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountInvestor,
    TAccountInvestorWallet,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type IssueShareInput<
  TAccountAdmin extends string = string,
  TAccountFundraiser extends string = string,
  TAccountInvestment extends string = string,
  TAccountInvestor extends string = string,
  TAccountInvestorWallet extends string = string,
  TAccountReitMint extends string = string,
  TAccountInvestorAta extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  fundraiser: Address<TAccountFundraiser>;
  investment: Address<TAccountInvestment>;
  investor: Address<TAccountInvestor>;
  /** Investor wallet - needed as the ATA authority (not a signer for this instruction) */
  investorWallet: Address<TAccountInvestorWallet>;
  reitMint: Address<TAccountReitMint>;
  investorAta: Address<TAccountInvestorAta>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  investorPubkey: IssueShareInstructionDataArgs['investorPubkey'];
  reitIdHash: IssueShareInstructionDataArgs['reitIdHash'];
  sharePrice: IssueShareInstructionDataArgs['sharePrice'];
};

export function getIssueShareInstruction<
  TAccountAdmin extends string,
  TAccountFundraiser extends string,
  TAccountInvestment extends string,
  TAccountInvestor extends string,
  TAccountInvestorWallet extends string,
  TAccountReitMint extends string,
  TAccountInvestorAta extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: IssueShareInput<
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountInvestor,
    TAccountInvestorWallet,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress }
): IssueShareInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountFundraiser,
  TAccountInvestment,
  TAccountInvestor,
  TAccountInvestorWallet,
  TAccountReitMint,
  TAccountInvestorAta,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    fundraiser: { value: input.fundraiser ?? null, isWritable: true },
    investment: { value: input.investment ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: false },
    investorWallet: { value: input.investorWallet ?? null, isWritable: false },
    reitMint: { value: input.reitMint ?? null, isWritable: true },
    investorAta: { value: input.investorAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      'SysvarRent111111111111111111111111111111111' as Address<'SysvarRent111111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.fundraiser),
      getAccountMeta(accounts.investment),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.investorWallet),
      getAccountMeta(accounts.reitMint),
      getAccountMeta(accounts.investorAta),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getIssueShareInstructionDataEncoder().encode(
      args as IssueShareInstructionDataArgs
    ),
    programAddress,
  } as IssueShareInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountFundraiser,
    TAccountInvestment,
    TAccountInvestor,
    TAccountInvestorWallet,
    TAccountReitMint,
    TAccountInvestorAta,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedIssueShareInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    fundraiser: TAccountMetas[1];
    investment: TAccountMetas[2];
    investor: TAccountMetas[3];
    /** Investor wallet - needed as the ATA authority (not a signer for this instruction) */
    investorWallet: TAccountMetas[4];
    reitMint: TAccountMetas[5];
    investorAta: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    rent: TAccountMetas[10];
  };
  data: IssueShareInstructionData;
};

export function parseIssueShareInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedIssueShareInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      fundraiser: getNextAccount(),
      investment: getNextAccount(),
      investor: getNextAccount(),
      investorWallet: getNextAccount(),
      reitMint: getNextAccount(),
      investorAta: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getIssueShareInstructionDataDecoder().decode(instruction.data),
  };
}
