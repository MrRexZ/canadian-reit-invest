/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { CANADIANREITINVEST_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_INVESTOR_DISCRIMINATOR = new Uint8Array([
  12, 105, 129, 28, 138, 149, 223, 135,
]);

export function getInitializeInvestorDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_INVESTOR_DISCRIMINATOR
  );
}

export type InitializeInvestorInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountInvestor extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountInvestor extends string
        ? WritableAccount<TAccountInvestor>
        : TAccountInvestor,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInvestorInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeInvestorInstructionDataArgs = {};

export function getInitializeInvestorInstructionDataEncoder(): FixedSizeEncoder<InitializeInvestorInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_INVESTOR_DISCRIMINATOR })
  );
}

export function getInitializeInvestorInstructionDataDecoder(): FixedSizeDecoder<InitializeInvestorInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeInvestorInstructionDataCodec(): FixedSizeCodec<
  InitializeInvestorInstructionDataArgs,
  InitializeInvestorInstructionData
> {
  return combineCodec(
    getInitializeInvestorInstructionDataEncoder(),
    getInitializeInvestorInstructionDataDecoder()
  );
}

export type InitializeInvestorAsyncInput<
  TAccountSigner extends string = string,
  TAccountInvestor extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  investor?: Address<TAccountInvestor>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeInvestorInstructionAsync<
  TAccountSigner extends string,
  TAccountInvestor extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: InitializeInvestorAsyncInput<
    TAccountSigner,
    TAccountInvestor,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInvestorInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountInvestor,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.investor.value) {
    accounts.investor.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([105, 110, 118, 101, 115, 116, 111, 114])
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeInvestorInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeInvestorInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountInvestor,
    TAccountSystemProgram
  >);
}

export type InitializeInvestorInput<
  TAccountSigner extends string = string,
  TAccountInvestor extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  signer: TransactionSigner<TAccountSigner>;
  investor: Address<TAccountInvestor>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeInvestorInstruction<
  TAccountSigner extends string,
  TAccountInvestor extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
>(
  input: InitializeInvestorInput<
    TAccountSigner,
    TAccountInvestor,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInvestorInstruction<
  TProgramAddress,
  TAccountSigner,
  TAccountInvestor,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? CANADIANREITINVEST_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    signer: { value: input.signer ?? null, isWritable: true },
    investor: { value: input.investor ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.investor),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeInvestorInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeInvestorInstruction<
    TProgramAddress,
    TAccountSigner,
    TAccountInvestor,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeInvestorInstruction<
  TProgram extends string = typeof CANADIANREITINVEST_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    signer: TAccountMetas[0];
    investor: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeInvestorInstructionData;
};

export function parseInitializeInvestorInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeInvestorInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      signer: getNextAccount(),
      investor: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeInvestorInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
