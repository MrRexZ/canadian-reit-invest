/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const INVESTMENT_DISCRIMINATOR = new Uint8Array([
  175, 134, 9, 175, 115, 153, 39, 28,
]);

export function getInvestmentDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INVESTMENT_DISCRIMINATOR);
}

export type Investment = {
  discriminator: ReadonlyUint8Array;
  investor: Address;
  fundraiser: Address;
  usdcAmount: bigint;
  reitAmount: number;
  status: number;
  bump: number;
};

export type InvestmentArgs = {
  investor: Address;
  fundraiser: Address;
  usdcAmount: number | bigint;
  reitAmount: number;
  status: number;
  bump: number;
};

export function getInvestmentEncoder(): FixedSizeEncoder<InvestmentArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['investor', getAddressEncoder()],
      ['fundraiser', getAddressEncoder()],
      ['usdcAmount', getU64Encoder()],
      ['reitAmount', getU32Encoder()],
      ['status', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INVESTMENT_DISCRIMINATOR })
  );
}

export function getInvestmentDecoder(): FixedSizeDecoder<Investment> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['investor', getAddressDecoder()],
    ['fundraiser', getAddressDecoder()],
    ['usdcAmount', getU64Decoder()],
    ['reitAmount', getU32Decoder()],
    ['status', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getInvestmentCodec(): FixedSizeCodec<
  InvestmentArgs,
  Investment
> {
  return combineCodec(getInvestmentEncoder(), getInvestmentDecoder());
}

export function decodeInvestment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Investment, TAddress>;
export function decodeInvestment<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Investment, TAddress>;
export function decodeInvestment<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Investment, TAddress> | MaybeAccount<Investment, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getInvestmentDecoder()
  );
}

export async function fetchInvestment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Investment, TAddress>> {
  const maybeAccount = await fetchMaybeInvestment(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeInvestment<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Investment, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeInvestment(maybeAccount);
}

export async function fetchAllInvestment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Investment>[]> {
  const maybeAccounts = await fetchAllMaybeInvestment(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeInvestment(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Investment>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeInvestment(maybeAccount));
}

export function getInvestmentSize(): number {
  return 86;
}
