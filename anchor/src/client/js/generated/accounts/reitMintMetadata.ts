/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const REIT_MINT_METADATA_DISCRIMINATOR = new Uint8Array([
  7, 203, 205, 100, 252, 27, 87, 105,
]);

export function getReitMintMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REIT_MINT_METADATA_DISCRIMINATOR
  );
}

export type ReitMintMetadata = {
  discriminator: ReadonlyUint8Array;
  mint: Address;
  sharePrice: bigint;
  decimals: number;
  currency: string;
};

export type ReitMintMetadataArgs = {
  mint: Address;
  sharePrice: number | bigint;
  decimals: number;
  currency: string;
};

export function getReitMintMetadataEncoder(): Encoder<ReitMintMetadataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mint', getAddressEncoder()],
      ['sharePrice', getU64Encoder()],
      ['decimals', getU8Encoder()],
      ['currency', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: REIT_MINT_METADATA_DISCRIMINATOR })
  );
}

export function getReitMintMetadataDecoder(): Decoder<ReitMintMetadata> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mint', getAddressDecoder()],
    ['sharePrice', getU64Decoder()],
    ['decimals', getU8Decoder()],
    ['currency', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getReitMintMetadataCodec(): Codec<
  ReitMintMetadataArgs,
  ReitMintMetadata
> {
  return combineCodec(
    getReitMintMetadataEncoder(),
    getReitMintMetadataDecoder()
  );
}

export function decodeReitMintMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ReitMintMetadata, TAddress>;
export function decodeReitMintMetadata<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ReitMintMetadata, TAddress>;
export function decodeReitMintMetadata<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ReitMintMetadata, TAddress>
  | MaybeAccount<ReitMintMetadata, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getReitMintMetadataDecoder()
  );
}

export async function fetchReitMintMetadata<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ReitMintMetadata, TAddress>> {
  const maybeAccount = await fetchMaybeReitMintMetadata(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeReitMintMetadata<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ReitMintMetadata, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeReitMintMetadata(maybeAccount);
}

export async function fetchAllReitMintMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ReitMintMetadata>[]> {
  const maybeAccounts = await fetchAllMaybeReitMintMetadata(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeReitMintMetadata(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ReitMintMetadata>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeReitMintMetadata(maybeAccount)
  );
}
